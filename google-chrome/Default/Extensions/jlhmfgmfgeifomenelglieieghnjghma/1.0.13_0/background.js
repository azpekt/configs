var Background=function(e){var n=new Map,o=new Map;return e.postMessageToPage=function(e,n){var t=o.get(e);if(console.log("[Background] postMessageToPage: name=",e),console.log("[Background] postMessageToPage: clientPort=",t),t)try{console.log("[Background] postMessageToPage: message=",n),t.postMessage(n)}catch(e){console.log("[Background] postMessageToPage: err=",e.toString())}},e.postMessageToNative=function(o,t){var a=n.get(o);if(console.log("[Background] postMessageToNative: name=",o),console.log("[Background] postMessageToNative: nativePort=",a),a)try{console.log("[Background] postMessageToNative: message=",t),a.postMessage(t)}catch(n){var s={timestamp:(new Date).toUTCString(),token:o,message_type:"error",message:{error_no:-1,error_message:n.toString()}};e.postMessageToPage(a.token,s),console.log("[Background] postMessageToNative: err=",n.toString())}},e.handleClientMessage=function(n,o){console.log("[Background] handleClientMessage: clientPort=",o),console.log("[Background] handleClientMessage: message=",n),e.postMessageToNative(o.name,n)},e.handleNativeMessage=function(n,o){console.log("[Background] handleNativeMessage: nativePort=",o),console.log("[Background] handleNativeMessage: message=",n),e.postMessageToPage(o.token,n)},e.handleNativeDisconnect=function(e){if(console.log("[Background] handleNativeDisconnect: nativePort=",e),e){console.log("[Background] handleNativeDisconnect: lastError=",chrome.runtime.lastError.message),n.get(e.token)&&n.delete(e.token),console.log("[Background] handleNativeDisconnect: nativePorts=",n);var t=o.get(e.token);if(console.log("[Background] handleNativeDisconnect: clientPort=",t),t){var a={timestamp:(new Date).toUTCString(),token:t.name,message_type:"disconnect",message:chrome.runtime.lastError.message};t.postMessage(a),t.disconnect(),o.get(t.name)&&o.delete(t.name),console.log("[Background] handleNativeDisconnect: clientPorts=",o)}}},e.handleClientDisconnect=function(t){console.log("[Background] handleClientDisconnect: clientPort=",t),o.get(t.name)&&o.delete(t.name),console.log("[Background] handleClientDisconnect: clientPorts=",o);var a=n.get(t.name);if(a){var s={timestamp:(new Date).toUTCString(),token:a.token,message_type:"disconnect",message:"disconnect"};e.postMessageToNative(a.token,s),n.get(a.token)&&n.delete(a.token),console.log("[Background] handleClientDisconnect: nativePorts=",n)}},e.connectNative=function(o){var t=n.get(o);if(console.log("[Background] connectNative: name=",o),console.log("[Background] connectNative: nativePort=",t,"now=",performance.now()),!t)try{(t=chrome.runtime.connectNative("com.webex.meeting")).token=o,t.onMessage.addListener(e.handleNativeMessage),t.onDisconnect.addListener(e.handleNativeDisconnect),n.set(t.token,t),console.log("[Background] connectNative: nativePorts=",n)}catch(e){return console.log("[Background] connectNative: Failed connecting to native port,",e.toString()),null}return t},e.handleClientConnect=function(n){if(console.log("[Background] chrome.runtime.onConnect, clientPort=",n),n.onMessage.addListener(e.handleClientMessage),n.onDisconnect.addListener(e.handleClientDisconnect),o.set(n.name,n),console.log("[Background] chrome.runtime.onConnect, clientPorts=",o),e.connectNative(n.name)){var t={timestamp:(new Date).toUTCString(),token:n.name,message_type:"hello",message:"hello"};e.postMessageToNative(n.name,t)}},e.init=function(){chrome.runtime.onConnect.addListener(e.handleClientConnect),chrome.runtime.onUpdateAvailable&&chrome.runtime.onUpdateAvailable.addListener(function(e){}),chrome.runtime.onMessage.addListener(function(e,n){})},e}(Background||{});window.addEventListener("load",function(){Background.init()},!1);